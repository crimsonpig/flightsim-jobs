<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<import resource="data-source-context.xml"/>
	<import resource="batch-meta-context.xml"/>
	
	<!-- Alternatively, we could just do a component scan and pick up JobComponentsConfig that way -->
<!-- 	<context:component-scan base-package="com.crimsonpig.fs"/> -->
	<!-- Automatically use Annotations to load classes -->
	<context:annotation-config/>
	<!-- This class is a configuration we load using the preceding annotation -->
	<bean class="com.crimsonpig.fs.config.JobComponentsConfig"/>
	
	<job id="ConvertAirportsJob" job-repository="jobRepository" xmlns="http://www.springframework.org/schema/batch">
		<step id="ClearConvertedAirportsStep" next="ConvertLatLonAndPersistStep">
			<tasklet ref="truncateTableTasklet"/>
		</step>
		<step id="ConvertLatLonAndPersistStep">
			<tasklet>
				<chunk commit-interval="50" reader="airportsFileReader"
					processor="airportLatLonDecimalConverter" writer="convertedAirportsWriter">
				</chunk>
			</tasklet>
		</step>
	</job>

</beans>
